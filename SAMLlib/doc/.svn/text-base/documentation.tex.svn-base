\documentclass[10pt,a4paper]{article}

\usepackage[latin1]{inputenc}
\usepackage{graphicx}

\frenchspacing
\sloppy
\pagestyle{plain}

\title{SICS lightweight SAML library}
\author{Ludwig Seitz \\SICS}

\begin{document}


\maketitle


\section*{\center \small Abstract}

{\small 
The SICS lightweight SAML library (SlSl) is a Java code library for creating 
and consuming SAML attribute assertions. This is a short documentation of that 
library 
}

\section{Introduction}
The SAML \cite{SAML2} standard has good OpenSource support. Very comprehensive 
implementations of the standard exist. However with comprehensiveness comes a
certain amount of overhead. 

Therefore we have decided to provide a lightweight library targeted at a subset
of SAML, namely attribute assertions.

\section{Supported elements}
The SlSl supports only the \emph{assertion} part of the SAML standard. No 
support for \emph{protocols, bindings, or profiles} is given, with the 
exception of the SAML profile of XACML \cite{SAML-XACML}, namely the part 
about converting XACML \cite{XACML} attributes to SAML and vice-versa.

From the SAML assertions, the following elements are supported:

\begin{itemize}
  \item NameID;
  \item Issuer;
  \item Assertion;
  \item Subject;
  \item SubjectConfirmation;
  \item SubjectConfirmationData;
  \item Signature (from the xmldsig standard);
  \item Conditions (with NotBefore and NotOnOrAfter attributes);
  \item OneTimeUse condition;
  \item AttributeStatement;
  \item Attribute;
  \item AttributeValue.
\end{itemize}  

We do not support the following assertion elements:
\begin{itemize}
  \item EnryptedID;
  \item AssertionIDRef;
  \item AssertionURIRef;
  \item EncryptedAssertion;
  \item AudienceRestriction condition;
  \item ProxyRestricting condition;
  \item Advice and all sub-elements;
  \item AuthnStatement and all sub-elements;
  \item EnryptedAttribute;
  \item AuthzDecisionStatement and all sub-elements.
\end{itemize}

\section{Using the library to create assertions}\label{creating}
In order to create an assertion (\texttt{SignedSAMLAssertion}) you need to 
create all the components of the assertion, except for the signature, first. 
These are:
\begin{itemize}
  \item the issuer (\texttt{SAMLNameID});
  \item the subject (\texttt{SAMLSubject});
  \item the conditions (\texttt{SAMLConditions});
  \item the statements (a \texttt{List} of \texttt{SAMLStatements});
\end{itemize}

Furthermore you need to instantiate a \texttt{SAMLSigner} that will perform the
signing of the assertion.

\subsection{SAMLNameID}\label{SAMLNameID}
The \texttt{SAMLNameID} class takes one mandatory and four optional parameters.

\begin{itemize}
  \item The \texttt{name} is a String value and is mandatory;
  \item the \texttt{qualifierType} is Boolean and a value of \texttt{true} 
    means that we are providing a NameQualifier, while \texttt{false} means we 
    are providing a SPNameQualifier (see section 2.2.2 of the SAML standard 
    \cite{SAML2} for what this means);
  \item  the \texttt{qualifier} is the String value of the NameQualifier or 
    SPNameQualifier;
  \item the \texttt{format} is a \texttt{java.net.URI} representing the format
    of the NameID as defined in section 2.2.2 of the SAML 
    standard \cite{SAML2};
  \item the \texttt{spProvidedID} is a name identifier established by a 
    service provider, as defined in section 2.2.2 of the SAML 
    standard \cite{SAML2}.
\end{itemize}

\subsection{SAMLSubject}\label{SAMLSubject}
Instances of the \texttt{SAMLSubject} class require either one of 
a \texttt{SAMLID} or a \texttt{List} of \texttt{SAMLSubjectConfirmation}.

Currently the only instance of the \texttt{SAMLID} interface is the
\texttt{SAMLNameID} class (see section \ref{SAMLNameID}).

\subsubsection{SAMLSubjectConfimation}\label{SAMLSubjectConfirmation}
The \texttt{SAMLSubjectConfirmation} class supports 3 types of standardized
subject confirmation methods:
\begin{itemize}
  \item urn:oasis:names:tc:SAML:2.0:cm:holder-of-key;
  \item urn:oasis:names:tc:SAML:2.0:cm:sender-vouches
  \item urn:oasis:names:tc:SAML:2.0:cm:bearer
\end{itemize}

These identifiers are available as the static variables \texttt{holder, sender}
and \texttt{bearer} of the class.

The object constructor requires a \texttt{java.net.URI} method, a 
\texttt{List} of \texttt{SAMLID} representing the subject identifiers that are
confirmed, and a \texttt{List} of \texttt{SAMLSubjectConfirmationData}.

The two latter parameters can both be null (although that's quite useless
for confirming a subject).

\subsubsection{SAMLSubjectConfirmationData}\label{SAMLSubjectConfirmationData}
This class has two constructors, one for the holder-of-key and one for the
two other methods of confirmation.

The constructors both take the following arguments, all of which are optional
and can be null:
\begin{itemize}
  \item notBefore, a \texttt{java.util.Date} before which the confirmation 
    should not be used. 
  \item notOnOrAfter, a \texttt{java.util.Date} on or after which the 
    confirmation should not be used.
  \item recipient, a \texttt{java.net.URI} describing the recipient.
  \item inResponseTo, a String giving the SAML protocol message id to which
    this responds.
  \item address, a String describing the network address/location form which
    the attesting entity can present the assertion.
\end{itemize}

In addition the holder-of-key constructor also takes a \texttt{List} of 
\texttt{javax.xml.crypto.dsig.keyinfo.KeyInfo}, representing the key or keys
that have been used to confirm the subject's identity.

\subsection{SAMLConditions}\label{SAMLConditions}
The \texttt{SAMLConditions} class constructor takes 3 parameters, all of which
are optional and can be null:

\begin{itemize}
  \item notBefore, a \texttt{java.util.Date} before which the assertion 
    should not be used. 
  \item notOnOrAfter, a \texttt{java.util.Date} on or after which the 
    assertion should not be used.
  \item a \texttt{List} of \texttt{SAMLCondition}.
\end{itemize}


\subsubsection{SAMLCondition and SAMLOneTimeUse}\label{SAMLOneTimeUse}
The \texttt{SAMLCondition} class is abstract and is only instantiated by
the \texttt{SAMLOneTimeUse} class. The latter class doesn't need any parameters
and represents the fact that the assertion containing this condition should
only be used once.

\subsection{SAMLStatement and SAMLAttributeStatement}\label{SAMLStatement}
The \texttt{SAMLStatement} interface is currently only implemented by the 
\texttt{SAMLAttributeStatement} class.

The latter classes' constructor requires a \texttt{List} of 
\texttt{SAMLAttribute}.

\subsubsection{SAMLAttribute}\label{SAMLAttribute}
The \texttt{SAMLAttribute} class constructor requires a String describing the
name of the attribute. When converting XACML attribute to SAML attributes,
this is where the XACML AttributeId goes.

The other parameters of the constructor are optional and can be null.

\begin{itemize}
  \item nameFormat is a \texttt{java.net.URI} describing the format of the
    attribute's name. For XACML attributes use the static variable 
    \texttt{xamclNameFormat} of this class;
  \item friendlyName is a String giving a human-readable form of the name;
  \item otherXMLAttrs is a \texttt{Map} of Strings to Strings. This allows to
    specify other XML-attributes that should be included in the object.
    
    For XACML specify a mapping from the XACML DataType XML-attribute
    to it's value. If this mapping is missing, the attribute is assumed to 
    have the DataType \texttt{http://www.w3.org/2001/XMLSchema\#string}.
   
    If the XACML attribute has an Issuer XML-attribute this should be 
    transferred to the Issuer element of the SAML assertion (see section 
    \ref{creating}).
  \item attributeValues is a \texttt{List} of \texttt{SAMLAttributeValue}/
\end{itemize}

\subsubsection{SAMLAttributeValue}\label{SAMLAttributeValue}
SAML attribute values take a String value and an optional \texttt{java.net.URI}
type in the constructor. The type can be null.

\subsection{SAMLSigner}\label{SAMLSigner}
The \texttt{SAMLSigner} class is used to generate signatures for 
\texttt{SignedSAMLAssertion}. 

It requires the following parameters in its constructor:
\begin{itemize}
  \item parser, an instance of \texttt{XMLInputParser};
  \item privateKey, an instance of \texttt{java.security.PrivateKey};
  \item cert, an instance of \texttt{java.security.cert.X509Certificate}.
\end{itemize}

\subsubsection{XMLInputParser}
The \texttt{XMLInputParser} class implements XML parsing. It's a convenience 
class for saving the lines of code needed to configure a 
\texttt{javax.xml.parsers.DocumentBuilder}.

It takes two parameters both of which can be null.
\begin{itemize}
  \item schemas, an array of \texttt{java.io.InputStream} containing 
    XML-schemas to use when parsing an XML document.
  \item entityMap, an instance of \texttt{Map} mapping String to String.
    used to resolve entities to local files. The keys are systemIds of 
    publicIds of the entities and the values names of local files containing 
    these entities.
\end{itemize}

\subsection{Example code}
\begin{verbatim}

SAMLSigner signer = 

SAMLNameID subjectId = new SAMLNameID("ludwig@sics.se");
SAMLNameID issuer = new SAMLNameID("MSNP");		

ArrayList<SAMLAttributeValue> values
        = new ArrayList<SAMLAttributeValue>();
values.add(new SAMLAttributeValue(null, "member"));
SAMLAttribute member = new SAMLAttribute(
                "group:SWiN", null, null, null, values);
List<SAMLAttribute> attrs = new ArrayList<SAMLAttribute>();
attrs.add(member);		
SAMLAttributeStatement statement 
        = new SAMLAttributeStatement(attrs);

List<SAMLStatement> statements = new ArrayList<SAMLStatement>();
statements.add(statement);

Date now = new Date();
Calendar cal = Calendar.getInstance();
cal.add(Calendar.DAY_OF_MONTH, 1);

Date notOnOrAfter = cal.getTime();
List<SAMLCondition> conditions = Collections.emptyList();
SAMLConditions conditionsE 
        = new SAMLConditions(now, notOnOrAfter, conditions);

SignedSAMLAssertion assertion = null;
try {
        assertion = new SignedSAMLAssertion(issuer, subject, 
	        conditionsE, statements, signer);
    } catch (Exception e) {
        //FIXME: Do some error handling
    }
\end{verbatim}

\section{Using the library to consume assertions}
In order to consume a SAMLAssertion you need to parse it into a 
\texttt{SignedSAMLAssertion} object. If the assertion has a signature,
it will be verified with the certificate included in the signature.

The \texttt{SignedSAMLAssertion} class has a static method \texttt{getInstance}
that will consume a \texttt{org.w3c.dom.Node} containing the SAML assertion.

This method will also perform signature verification and throw a 
\texttt{javax.xml.crypto.dsig.XMLSignatureException} if the signature is not
valid.

\subsection{Example code}
\begin{verbatim}
Node samlAssertion = ...;
SignedSAMLAssertion newAssertion = null;
try {
        newAssertion 
            = SignedSAMLAssertion.getInstance(samlAssertion);
} catch (VerificationException ve) {
        // FIXME: do something
} catch (MarshalException me) {
        // FIXME: do something
} catch (XMLSignatureException xse) {
        // FIXME: do something
}

\end{verbatim}



\bibliography{references}
\bibliographystyle{ludwig}

\end{document}
